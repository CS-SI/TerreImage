# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QGISEducation
                                 A QGIS plugin
 QGISEducation
                             -------------------
        begin                : 2014-05-13
        copyright            : (C) 2014 by CNES
        email                : alexia.mondot@c-s.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import datetime

from PyQt4.QtGui import QFileDialog, QMessageBox
from PyQt4.QtCore import QDir, QSettings

from working_layer import WorkingLayer
from manage_bands import manage_bands
import manage_QGIS
import terre_image_processing
from terre_image_constant import TerreImageConstant
from processing_manager import ProcessingManager
import terre_image_run_process
import OTBApplications
import terre_image_gdal_system

# import logging for debug messages
import terre_image_logging
logger = terre_image_logging.configure_logger()


def fill_default_directory():
    """
    Creates working directory
    Fills the output directory line edit if ui given
    """
    datetime_now = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
    current_directory = os.path.join(os.getenv("HOME"), "TerreImage", datetime_now)
    if not os.path.exists(current_directory):
        os.makedirs(current_directory)
    return current_directory, datetime_now


def getOutputDirectory(ui):
    """
    Opens a dialog to get the output directory
    """
    current_directory = ui.lineEdit_working_dir.text()
    if ui.lineEdit_working_dir.text():
        path = current_directory
    else:
        path = QDir.currentPath()
    output_directory = ""
    dir_dest = QFileDialog.getExistingDirectory(None, u"Répertoire de destination des fichiers de TerreImage", path)
    if dir_dest:
        ui.lineEdit_working_dir.setText(dir_dest)
        output_directory = dir_dest
        update_subdirectories(output_directory)

#         except UnicodeEncodeError:
#             QMessageBox.warning( None , "Erreur", u'Le répertoire que vous avec sélectionné contient un ou des caractères spéciaux. \
# La version actuelle du plugin ne gère pas ce type de répertoires. \
# Veuillez renommer le répertoire ou choisir un autre emplacement.', QMessageBox.Ok )

    return output_directory


def update_subdirectories(output_directory):
    """
    Create sub directories for the processings:

        Classification : this directory will contain the results of the classification
        KMZ            : this directory will contain the internal files generated by KMZ Export
        KMEans         : this directory will contain the internal files of the kmeans process
    """
    sub = ['Classification', 'Internal']
    for item in sub:
        if not os.path.exists(os.path.join(output_directory, item)):
            os.makedirs(os.path.join(output_directory, item))


def working_layer(canvas):
    source = canvas.currentLayer().source()
    layer = WorkingLayer(source, canvas.currentLayer())

    # self.layer = self.canvas.currentLayer()
    if layer:
        # self.define_bands(self.layer)
        # manage_bands()
        # self.red, self.green, self.blue, self.pir, self.mir = manage_bands().get_values()
        red, green, blue, pir, mir = manage_bands().get_values()

        bands = {'red': red, 'green': green, 'blue': blue, 'pir': pir, 'mir': mir}
        layer.set_bands(bands)

        logger.debug("{} {} {} {} {}".format(red, green, blue, pir, mir))
        return layer


def set_current_layer(iface):
    layer, bands = get_workinglayer_on_opening(iface)
    if layer:
        working_directory = os.path.join(os.path.dirname(layer.source_file), "working_directory")
        update_subdirectories(working_directory)
        if not os.path.exists(working_directory):
            os.makedirs(working_directory)
        ProcessingManager().working_layer = layer
        # self.classif_tool.set_layers(ProcessingManager().get_qgis_working_layers(), self.layer.get_qgis_layer(), self.layer.band_invert)
        # self.classif_tool.set_directory(self.working_directory)
        # self.classif_tool.setupUi()
        # layers_for_value_tool.append(layer ) #.get_qgis_layer())
        logger.debug("working directory" + working_directory)

        return layer, bands, working_directory
    return None, None, None


def get_workinglayer_on_opening(iface):
    settings = QSettings()
    last_folder = settings.value("terre_image_last_folder")

    if last_folder:
        path = last_folder
    else:
        path = QDir.currentPath()

    file_opened = QFileDialog.getOpenFileName(None, "Selectionner un fichier raster", path)

    settings.setValue("terre_image_last_folder", os.path.dirname(file_opened))
    settings.sync()

    if file_opened:
        #         try:
        #             str(file_opened)
        #         except UnicodeEncodeError:
        #             QMessageBox.warning( None , "Erreur", u'L\'image que vous essayez d\'ouvrir contient un ou des caractères spéciaux. \
        # La version actuelle du plugin ne gère pas ce type de fichiers. \
        # Veuillez renommer le fichier et ou les répertoires le contenant.', QMessageBox.Ok )
        #             return None, None
        #         else:
        #             if file_opened.find(" ") != -1:
        #                 QMessageBox.warning( None , "Attention", u'L\'image que vous essayez d\'ouvrir contient un ou plusieurs espaces. Les traitements sur cette image provoqueront une erreur.'.encode('utf8'), QMessageBox.Ok )

        if file_opened.endswith(".qgs"):
            # open new qgis project
            pass
        else:
            raster_layer = manage_QGIS.get_raster_layer(file_opened, os.path.splitext(os.path.basename(file_opened))[0])
            type_image = terre_image_processing.get_sensor_id(file_opened)
            logger.debug("type_image {}".format(type_image))
            layer = WorkingLayer(file_opened, raster_layer)
            layer.set_type(type_image)
            # self.layer = self.canvas.currentLayer()
            if layer:
                # self.define_bands(self.layer)
                # manage_bands()
                # self.red, self.green, self.blue, self.pir, self.mir = manage_bands().get_values()
                red, green, blue, pir, mir = manage_bands(type_image, layer.get_band_number()).get_values()

                if red != -1 or green != -1 or blue != -1 or pir != -1 or mir != -1:
                    all_set = True
                    bands = {'red': red, 'green': green, 'blue': blue, 'pir': pir, 'mir': mir}
                    for i in range(1, layer.get_band_number() + 1):
                        if i not in bands.values():
                            all_set = False
                    if all_set:
                        layer.set_bands(bands)

                        logger.debug("{} {} {} {} {}".format(red, green, blue, pir, mir))

                        cst = TerreImageConstant()
                        cst.index_group = cst.iface.legendInterface().addGroup("Terre Image", True, None)

                        manage_QGIS.add_qgis_raser_layer(raster_layer, iface.mapCanvas(), bands)
                        terre_image_gdal_system.compute_overviews(file_opened)
                        return layer, bands
                    else:
                        QMessageBox.warning(None, "Erreur",
                                            u'Il y a un problème dans la définition des bandes spectrales.',
                                            QMessageBox.Ok)
                        return None, None
                else:
                    return None, None
    else:
        return None, None


def restore_working_layer(filename, bands, layer_type):
    raster_layer = manage_QGIS.get_raster_layer(filename, os.path.splitext(os.path.basename(filename))[0])
    layer = WorkingLayer(filename, raster_layer)
    layer.set_type(layer_type)
    layer.set_bands(bands)
    return layer, bands



